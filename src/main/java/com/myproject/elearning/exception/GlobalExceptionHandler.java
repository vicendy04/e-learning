package com.myproject.elearning.exception;

import com.myproject.elearning.exception.problemdetails.InvalidIdException;
import java.util.List;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;

/**
 * Here the key phrases are:
 * status: HTTP status code generated by the server.
 * type: A URL that identifies the problem type and how to mitigate it. The default value is â€“ about:blank.
 * title: A short summary of the problem.
 * detail: Problem explanation specific to this occurrence.
 * instance: URL of the service where this problem occurred. The default value is the current request URL.
 * <a href="https://howtodoinjava.com/spring-mvc/spring-problemdetail-errorresponse/">...</a>
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler()
    public ResponseEntity<ProblemDetail> handleAnyException(Exception ex, WebRequest request) {
        ProblemDetail problemDetail = getProblemDetail(ex);
        return ResponseEntity.status(problemDetail.getStatus()).body(problemDetail);
    }

    private ProblemDetail getProblemDetail(Throwable ex) {
        if (ex instanceof InvalidIdException iie) {
            return iie.getBody();
        } else if (ex instanceof MethodArgumentNotValidException manve) {
            manve.getBody().setProperty("errors", getFieldErrors(manve));
            return manve.getBody();
        }
        return null;
    }

    private List<String> getFieldErrors(MethodArgumentNotValidException ex) {
        return ex.getBindingResult().getFieldErrors().stream()
                .map(f -> f.getField() + ": " + f.getDefaultMessage())
                .toList();
    }
}
