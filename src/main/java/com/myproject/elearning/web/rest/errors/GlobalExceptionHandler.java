package com.myproject.elearning.web.rest.errors;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

/**
 * Here the key phrases are:
 * status: HTTP status code generated by the server.
 * type: A URL that identifies the problem type and how to mitigate it. The default value is â€“ about:blank.
 * title: A short summary of the problem.
 * detail: Problem explanation specific to this occurrence.
 * instance: URL of the service where this problem occurred. The default value is the current request URL.
 * <a href="https://howtodoinjava.com/spring-mvc/spring-problemdetail-errorresponse/">...</a>
 */
@RestControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    private final String hostname = "e-learning.com";

    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatusCode status, WebRequest request) {
        List<String> errors;
        errors = ex.getFieldErrors().stream()
                .map(fieldError -> fieldError.getField() + ": " + fieldError.getDefaultMessage())
                .collect(Collectors.toList());
        ProblemDetail problemDetail = ProblemDetail.forStatus(status);
        problemDetail.setTitle("Validation Failed");
        problemDetail.setDetail("There were validation errors");
        problemDetail.setType(URI.create("http://" + hostname + "/errors/validation-failed"));
        problemDetail.setProperty("errors", errors);
        return handleExceptionInternal(ex, problemDetail, headers, status, request);
    }

    public ResponseEntity<Object> handleInvalidUserException(InvalidUserException ex, WebRequest request) {
        ProblemDetail problemDetail = ProblemDetail.forStatusAndDetail(ex.getStatusCode(), ex.getMessage());
        problemDetail.setType(URI.create("http://" + hostname + "/errors/invalid-user"));
        problemDetail.setTitle("Invalid User Exception");
        return ResponseEntity.status(ex.getStatusCode()).body(problemDetail);
    }
}
